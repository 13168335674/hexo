<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[window.location对象实现页面刷新]]></title>
      <url>/hexo/2017/08/30/window.location%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0/</url>
      <content type="html"><![CDATA[<h4 id="用户点击浏览器后退按钮后页面ajax没有更新-通过使用windowlocation对象的方法属性实现页面刷新并刷新数据"><a href="#用户点击浏览器后退按钮后页面ajax没有更新-通过使用windowlocation对象的方法属性实现页面刷新并刷新数据" class="headerlink" title="用户点击浏览器后退按钮后页面ajax没有更新,通过使用windowlocation对象的方法属性实现页面刷新并刷新数据"></a>用户点击浏览器后退按钮后页面ajax没有更新,通过使用windowlocation对象的方法属性实现页面刷新并刷新数据</h4><a id="more"></a>
<p><strong>window.location.reload()</strong><br>该方法使浏览器刷新当前页面。<br>语法： location.reload()<br>参数： 可选参数， 默认为 false，从客户端缓存里取当前页进行F5刷新。 true, 则以GET  方式，从服务端取最新的页面, 相当于客户端点击 Shift + F5(“刷新”)。该方法在刷新时会<br>事件: 如果有数据提交的话，会弹窗提示是否提交<br>bug: 安卓微信浏览器中location.reload方法失效无法跳转?<br>解决办法: 使用location.href代替reload()来进行页面刷新或者跳转。<br><code>window.location.href = location.href+&#39;?time=&#39;+((new Date()).getTime());</code></p>
<p><strong>location.href</strong><br>location.href是最常用的属性,用于获得或设置窗口的URL，类似于document.url属性。<br>window.location.href = window.location.href;<br>// 这样也可以实现页面刷新并提交数据，数据提交时无弹窗提示</p>
<p><strong>location.replace()</strong><br>该方法通过指定URL替换当前缓存在历史里（客户端）的项目，因此当使用replace方法之后，你不能通过“前进”和“后退”来访问已经被替换的URL。<br>使用location.href属性跳转会被加入到浏览器的历史栈中，这意味着可以通过后退键来撤退。如果用户为了提高安全级别可以采用location.reolace(),这种方法不会有历史记录，使其无法后退到当前页.</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[封装localStorage本地数据存取方法]]></title>
      <url>/hexo/2017/08/29/%E5%B0%81%E8%A3%85localStorage%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AD%98%E5%8F%96%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="localStroages是HMTL5新型客户端数据存取新方式IE"><a href="#localStroages是HMTL5新型客户端数据存取新方式IE" class="headerlink" title="localStroages是HMTL5新型客户端数据存取新方式IE"></a>localStroages是HMTL5新型客户端数据存取新方式IE</h3><a id="more"></a>
<blockquote>
<p>欢迎收看饿了么系列 之 localStroage封装</p>
</blockquote>
<ul>
<li><p><em>window.localStorage</em></p>
<ul>
<li>读取： localStroage.getItem(‘key’)</li>
<li>储存： localStroage.setItem(‘key’,’value’)</li>
<li>兼容性： IE8+</li>
<li>大小： 5M</li>
<li>数据类型： String</li>
<li>有效期： 永久</li>
<li>在浏览器的隐私模式下面是不可读取且无法给爬虫抓取数据</li>
</ul>
</li>
<li><p>封装localStroage</p>
<ul>
<li>getter  saveToLocal(id,key,value){}</li>
<li>setter loadFromLocal(id,key,def){}</li>
</ul>
</li>
</ul>
<blockquote>
<p>源码地址 <a href="https://github.com/13189449986/MyBckup/blob/master/local.js" target="_blank" rel="external">My Github</a></p>
</blockquote>
<p><img src="http://orf1ycv0g.bkt.clouddn.com/blog/170828/7a7AI6hj7A.png?imageslim" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[封装时间格式化函数]]></title>
      <url>/hexo/2017/08/28/%E5%B0%81%E8%A3%85%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="处理服务器返回的毫秒数时间格式"><a href="#处理服务器返回的毫秒数时间格式" class="headerlink" title="处理服务器返回的毫秒数时间格式"></a>处理服务器返回的毫秒数时间格式</h3><a id="more"></a>
<blockquote>
<p>欢迎收看饿了么系列 之 时间方法封装</p>
</blockquote>
<ul>
<li>封装localStroage<ul>
<li>formatDate(date, fmt){}</li>
<li>date:Number ,fmt:String</li>
<li>return fmt</li>
</ul>
</li>
</ul>
<blockquote>
<p>源码地址 <a href="https://github.com/13189449986/MyBckup/blob/master/date.js" target="_blank" rel="external">myGithub</a></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4985324-70cb6b2353da1f82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="时间封装方法"></p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm命令教程]]></title>
      <url>/hexo/2017/08/18/npm%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="总结npm常用命令"><a href="#总结npm常用命令" class="headerlink" title="总结npm常用命令"></a>总结npm常用命令</h3><p>npm (Node Package Manager)</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<ul>
<li>npm 默认与Node绑定在一起的，所以安装Node，自然就安装了npm。<br><a href="https://www.npmjs.com/" target="_blank" rel="external">npm 的官网</a></li>
<li><strong>PS:</strong> npm安装插件过程：从<a href="http://registry.npmjs.org下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常），因此建议设置镜像站点或者是使用淘宝提供的镜像包管理器" target="_blank" rel="external">http://registry.npmjs.org下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常），因此建议设置镜像站点或者是使用淘宝提供的镜像包管理器</a> cnpm </li>
<li>npm install cnpm -g –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></li>
</ul>
</blockquote>
<h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><h5 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h5><blockquote>
<ul>
<li><p>npm install gulp –save-dev<br>–save： 将该模配置信息保存至 package.json 文件中的Dependencies属性内。<br>-dev : 指明将配置信息保存至 package.json 文件中的的 Devdependencies 内。</p>
</li>
<li><p>全局安装<br>npm install gulp -g</p>
</li>
<li><p>安装指定版本号的模块<br>npm install rimraf@2.6.1</p>
</li>
<li><p>根据package.json配置文件安装模块<br>npm install</p>
</li>
</ul>
</blockquote>
<h5 id="速记安装"><a href="#速记安装" class="headerlink" title="速记安装"></a>速记安装</h5><blockquote>
<ul>
<li><p>实际上，像 install、–save、-dev 等关键字是可以省略书写的。<br>npm i gulp 等效于 npm install gulp<br>npm i gulp -S 等效于 npm install gulp –save<br>npm i gulp -D 等效于 npm install gulp –save-dev</p>
</li>
<li><p>总的来说，使用npm安装一个模块或插件，其格式如下：<br>npm (i | install) <a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x70;&#x61;&#99;&#107;&#x61;&#103;&#x65;&#78;&#x61;&#109;&#101;&#91;&#x40;&#118;&#x65;&#114;&#x73;&#105;&#x6f;&#110;&#x5d;">&#x70;&#x61;&#99;&#107;&#x61;&#103;&#x65;&#78;&#x61;&#109;&#101;&#91;&#x40;&#118;&#x65;&#114;&#x73;&#105;&#x6f;&#110;&#x5d;</a> [-g] [–save-dev]</p>
</li>
</ul>
</blockquote>
<h2 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h2><h5 id="卸载本地模块"><a href="#卸载本地模块" class="headerlink" title="卸载本地模块"></a>卸载本地模块</h5><blockquote>
<ul>
<li>npm uninstall rimraf<br>或者也可以简写为</li>
<li>npm uni rimraf</li>
</ul>
</blockquote>
<h5 id="卸载全局模块"><a href="#卸载全局模块" class="headerlink" title="卸载全局模块"></a>卸载全局模块</h5><blockquote>
<ul>
<li>npm uninstall gulp -g</li>
</ul>
</blockquote>
<h5 id="删除模块并卸载配置信息"><a href="#删除模块并卸载配置信息" class="headerlink" title="删除模块并卸载配置信息"></a>删除模块并卸载配置信息</h5><blockquote>
<ul>
<li>npm uninstall rimraf –save-dev</li>
</ul>
</blockquote>
<h5 id="总的来说，卸载模块的格式："><a href="#总的来说，卸载模块的格式：" class="headerlink" title="总的来说，卸载模块的格式："></a>总的来说，卸载模块的格式：</h5><blockquote>
<ul>
<li>npm (uni | unistall ) <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#112;&#x61;&#x63;&#x6b;&#x61;&#103;&#x65;&#x4e;&#97;&#x6d;&#101;&#91;&#64;&#x76;&#101;&#x72;&#115;&#105;&#111;&#110;&#93;">&#112;&#x61;&#x63;&#x6b;&#x61;&#103;&#x65;&#x4e;&#97;&#x6d;&#101;&#91;&#64;&#x76;&#101;&#x72;&#115;&#105;&#111;&#110;&#93;</a> [-g] [–save-dev]</li>
</ul>
</blockquote>
<h2 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h2><h5 id="模块的更新与模块的安装和卸载在使用上格式相同"><a href="#模块的更新与模块的安装和卸载在使用上格式相同" class="headerlink" title="模块的更新与模块的安装和卸载在使用上格式相同"></a>模块的更新与模块的安装和卸载在使用上格式相同</h5><blockquote>
<ul>
<li>npm update [packageName] [-g] [–save-dev]</li>
</ul>
</blockquote>
<h5 id="如果你要更新所有的插件的话"><a href="#如果你要更新所有的插件的话" class="headerlink" title="如果你要更新所有的插件的话"></a>如果你要更新所有的插件的话</h5><blockquote>
<ul>
<li>npm update [–save-dev]</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3实现流星动画]]></title>
      <url>/hexo/2017/08/18/CSS3%E5%AE%9E%E7%8E%B0%E6%B5%81%E6%98%9F%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h3 id="来个青春时尚的流星雨吧！"><a href="#来个青春时尚的流星雨吧！" class="headerlink" title="来个青春时尚的流星雨吧！"></a>来个青春时尚的流星雨吧！</h3><a id="more"></a>
<h3 id="实例demo"><a href="#实例demo" class="headerlink" title="实例demo"></a><a href="https://13189449986.github.io/MyBckup/CssStars/stars.html">实例demo</a></h3><h3 id="项目源码Github"><a href="#项目源码Github" class="headerlink" title="项目源码Github"></a><a href="https://github.com/13189449986/MyBckup/tree/master/CssStars" target="_blank" rel="external">项目源码Github</a></h3><p>效果预览:<br><img src="http://orf1ycv0g.bkt.clouddn.com/blog/170818/hBLB3EB8LL.gif" alt="mark"></p>
<p>项目实际使用效果:<br><img src="http://orf1ycv0g.bkt.clouddn.com/blog/170817/5398F4I1kf.gif" alt="mark"></p>
<p><strong> 喜欢就来个<a href="https://github.com/13189449986/MyBckup/tree/master/CssStars" target="_blank" rel="external">Star</a>吧 </strong></p>
]]></content>
      
        <categories>
            
            <category> 实用工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017Sun 假期时间安排]]></title>
      <url>/hexo/2017/08/17/2017Sun-%E5%81%87%E6%9C%9F%E5%AE%89%E6%8E%92/</url>
      <content type="html"><![CDATA[<h3 id="这是我的假期时间规划"><a href="#这是我的假期时间规划" class="headerlink" title="这是我的假期时间规划"></a>这是我的假期时间规划</h3><a id="more"></a>
<h3 id="Time-bolg"><a href="#Time-bolg" class="headerlink" title="Time-bolg"></a><a href="https://13189449986.github.io/MyDay/dist/">Time-bolg</a></h3><p>瞄一眼<br><img src="http://orf1ycv0g.bkt.clouddn.com/blog/170817/5398F4I1kf.gif" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> 实用工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在vue 中使用Stylus]]></title>
      <url>/hexo/2017/08/16/%E5%9C%A8vue%20%E4%B8%AD%E4%BD%BF%E7%94%A8Stylus/</url>
      <content type="html"><![CDATA[<h3 id="Stylus-gt-一个CSS预处理器"><a href="#Stylus-gt-一个CSS预处理器" class="headerlink" title="Stylus =&gt; 一个CSS预处理器"></a>Stylus =&gt; 一个CSS预处理器</h3><a id="more"></a>
<ol>
<li><p>安装<br><code>cnpm install stylus</code></p>
</li>
<li><p>初始化项目</p>
<ul>
<li>vue init webpack filename</li>
<li>cd filename</li>
<li>cnpm install</li>
<li>cnpm install stylus –save-dev</li>
<li>cnpm install stylus-loader –save-dev</li>
<li>npm run dev</li>
</ul>
</li>
<li><p>使用</p>
<blockquote>
<p>vue中使用Stylus</p>
   <style lang="stylus">
     .box
        background:red
        ....
  </style>
</blockquote>
</li>
<li><p>引入</p>
<blockquote>
<p> 引入单独的.styl文件<br> 新建stylus文件 <strong>filename.styl</strong><br> 编写样式后<br> 通过<code>script</code>标签<code>import</code>引入<br> import ‘./filename.styl’<br>   或<br>   在<code>style</code>标签<code>@import</code>引入<br>  @import “./common/stylus/mixin.styl”</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS选择器]]></title>
      <url>/hexo/2017/08/16/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="CSS选择器的一些使用总结"><a href="#CSS选择器的一些使用总结" class="headerlink" title="CSS选择器的一些使用总结"></a><a href="https://13189449986.github.io/MyBckup/CSS%E9%80%89%E6%8B%A9%E5%99%A8/">CSS选择器</a>的一些使用总结</h3><a id="more"></a>
<p><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="external">CSS 选择器参考手册</a></p>
<p><a href="http://www.w3cplus.com/css3/basic-selectors" target="_blank" rel="external">CSS3 选择器——基本选择器 </a></p>
<p><a href="http://www.w3cplus.com/css3/attribute-selectors" target="_blank" rel="external">CSS3 选择器——属性选择器</a></p>
<p><a href="http://www.w3cplus.com/css3/pseudo-class-selector" target="_blank" rel="external">CSS3 选择器——伪类选择器</a></p>
<p><a href="http://www.w3cplus.com/content/css-selection" target="_blank" rel="external">CSS ::Selection</a></p>
<p><a href="http://ued.ctrip.com/blog/?p=2545" target="_blank" rel="external">使用CSS选择器在页面中插入内容</a></p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[input[type=file]属性]]></title>
      <url>/hexo/2017/08/11/input%5Btype=file%5D%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h3 id="input-type-file-控件用来上传文件。当使用控件时，就授权了网页和服务器访问对应的文件，就可以得到File对象。"><a href="#input-type-file-控件用来上传文件。当使用控件时，就授权了网页和服务器访问对应的文件，就可以得到File对象。" class="headerlink" title=" input[type=file]  控件用来上传文件。当使用控件时，就授权了网页和服务器访问对应的文件，就可以得到File对象。"></a><strong> input[type=file] </strong> 控件用来上传文件。当使用控件时，就授权了网页和服务器访问对应的文件，就可以得到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="external">File</a>对象。</h3><a id="more"></a>
<blockquote>
<p>在Android手机webview中，是不支持上传文件的，网上说是修改Android端的代码导致的。</p>
</blockquote>
<ol>
<li><p>accept属性<br>该属性表明了服务器端可接受的文件类型，可以限制你手机选择相关的文件，如果限制多个，可以用逗号分割，下面的代码就表示只能选择图片与音频相关的文件：<code>&lt;input accept=&quot;image/*,audio/*&quot; type=&quot;file&quot;/&gt;</code> </p>
<p><img src="http://images2015.cnblogs.com/blog/211606/201602/211606-20160204150544007-405501771.jpg" alt="属性值"></p>
</li>
<li><p>change事件<br> 当用户点击控件上传文件会触发change事件，在移动端点击控件时会弹出键盘，体验非常不友好，通过设置属性<code>onfocus=&quot;this.blur()&quot;</code>使其失去焦点<br><code>&lt;input type=&quot;file&quot; id=&quot;upload&quot; onfocus=&quot;this.blur()&quot;/&gt;</code></p>
</li>
<li><p>file对象<br> 用户所选择的文件都存储在了一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileList" target="_blank" rel="external">FileList</a>对象上，其中每个文件都对应了一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="external">File</a>对象<br>file对象一共由9个属性 获取上次修改的时间<code>file[0].lastModifiedDate)</code> 获取文件名<code>file[0].name</code> 获取大小<code>file[0].size</code> 获取类型<code>file[0].type</code></p>
</li>
<li><p>参考资料：<br><a href="http://www.cnblogs.com/strick/p/5181701.html" target="_blank" rel="external">http://www.cnblogs.com/strick/p/5181701.html</a>  移动端图片操作（一）<br><a href="https://developer.mozilla.org/zh-CN/docs/Using_files_from_web_applications" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Using_files_from_web_applications</a>    在web应用中使用文件<br><a href="http://javascript.ruanyifeng.com/htmlapi/file.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/htmlapi/file.html</a>  文件和二进制数据的操作<a href="http://www.iunbug.com/archives/2012/06/04/208.html" target="_blank" rel="external">http://www.iunbug.com/archives/2012/06/04/208.html</a>   [译]JavaScript文件操作基础<br><a href="http://www.iunbug.com/archives/2012/06/05/254.html" target="_blank" rel="external">http://www.iunbug.com/archives/2012/06/05/254.html</a>   [译]JavaScript文件操作URL对象<a href="http://www.html5rocks.com/zh/tutorials/file/dndfiles" target="_blank" rel="external">http://www.html5rocks.com/zh/tutorials/file/dndfiles</a>     通过 File API 使用 JavaScript 读取文件</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript 6 - 解构赋值]]></title>
      <url>/hexo/2017/07/31/ES6%20-%20%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<h4 id="ES6-允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。"><a href="#ES6-允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。" class="headerlink" title="ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。"></a>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</h4><p> 最近在学习vuex中actions的参数中使用到了对象的解构赋值，故此前来学习了解 解构赋值语法<br><a id="more"></a></p>
<ol>
<li><p>开始<br>以前，为变量赋值，只能直接指定值。</p>
<blockquote>
<p>let a = 1; let b = 2; let c = 3;<br>ES6可以写成下面这样为变量赋值。<br>let [a,b,c] = [1,2,3];</p>
</blockquote>
<p>有关模式匹配的规则：</p>
<blockquote>
<p>let [foo, [[bar], baz]] = [1, [[2], 3]];<br>  foo // 1<br>  bar // 2<br>  baz // 3<br>  let [ , , third] = [“foo”, “bar”, “baz”];<br>  third // “baz”<br>  let [x, , y] = [1, 2, 3];<br>  x // 1<br>  y // 3<br>  let [head, …tail] = [1, 2, 3, 4];<br>  head // 1<br>  tail // [2, 3, 4]<br>  let [x, y, …z] = [‘a’];<br>  x // “a”<br>  y // undefined<br>  z // []</p>
</blockquote>
</li>
</ol>
<p>关于解构赋值参数不完整的情况：</p>
<blockquote>
<p>let [foo] = [];<br>   let [bar, foo] = [1];</p>
</blockquote>
<p>解构不成功的情况下，foo的值等于undefined</p>
<blockquote>
<p>let [x,y] = [1,2,3];<br>    x // 1 ,y // 2<br>    let [a,[b],d] = [a,[2,3],4];<br>    a // 1 , b //2 ,d // 4</p>
</blockquote>
<p>上面两个栗子，都属于不完全解构，但都可以成功。</p>
<p>如果等号的右边不是可遍历的结构（数组，Set）那么将会报错。</p>
<blockquote>
<p>// 编译报错<br>   let[foo] = 1;<br>   let [foo] = false;<br>   let [foo] = NaN;<br>   let [foo] = undefined;<br>   let [foo] = null;<br>   let [foo] = {}; </p>
</blockquote>
<p>对于Set结构进行解构赋值。</p>
<blockquote>
<p>let [x,y,z] = new Set([1,2,3]);<br>   x // 1</p>
</blockquote>
<p><strong> 解构赋值 - 默认值 </strong></p>
<blockquote>
<p>let [foo =  true] = [];<br>   foo  // true<br>   let [x,y = ‘b’] = [‘a’];<br>   x // ‘a’ , y // ‘b’<br>   let [x,y=’b’] = [‘a’,undefined];<br>   x // ‘a’ , y // ‘b’</p>
</blockquote>
<ul>
<li>ES6 内部使用严格相等运算符（===），判断一个位置是否有值。如果一个数组成员不严格等于undefined，默认值是不会生效的。*</li>
</ul>
<blockquote>
<p>let [x = 1] = [ undefined ];记得加上中括号，否则报错<br>   x // 1<br>   let[ x = 1 ] = [ null ];<br>   x // null</p>
</blockquote>
<p>上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。</p>
<p><strong> 对象的解构赋值 </strong><br>解构不仅可以用于数组，还可以用于对象。</p>
<blockquote>
<p>let { foo, bar } = { foo: “aaa”, bar: “bbb” };<br>   foo // “aaa”<br>   bar // “bbb”</p>
</blockquote>
<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>
<p>如果变量名与属性名不一致，必须写成下面这样。</p>
<blockquote>
<p>var { foo: baz } = { foo: ‘aaa’, bar: ‘bbb’ };<br>   baz // “aaa”<br>   let obj = { first: ‘hello’, last: ‘world’ };<br>   let { first: f, last: l } = obj;<br>   f // ‘hello’<br>   l // ‘world’</p>
</blockquote>
<p>这实际说明了对象的解构赋值是下面形式的简写。</p>
<blockquote>
<p>let { foo: foo, bar :bar } = { foo:’aaa’,bar :’bbb’ };</p>
</blockquote>
<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>
<blockquote>
<p>let { foo: baz } = { foo: “aaa”, bar: “bbb” };<br>   baz // “aaa”<br>   foo // error: foo is not defined</p>
</blockquote>
<p>上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</p>
<p><strong> 解构失败 </strong><br>默认值生效的条件是，对象的属性值严格等于undefined。</p>
<blockquote>
<p>var {x = 3} = {x: undefined};<br>   x // 3<br>   var {x = 3} = {x: null};<br>   x // null</p>
</blockquote>
<p>解构失败变量的值等于<code>undefined</code>。</p>
<blockquote>
<p>let { foo } = { bar : ‘baz’ };<br>   foo // undefined</p>
</blockquote>
<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>
<blockquote>
<p>let {foo: {bar}} = {baz: ‘baz’};</p>
</blockquote>
<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>
<blockquote>
<p>let { log, sin, cos } = Math;</p>
</blockquote>
<p>上面代码将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>
<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>
<blockquote>
<p>let arr = [1, 2, 3];<br>   let {0 : first, [arr.length - 1] : last} = arr;<br>   first // 1   ，   last // 3</p>
</blockquote>
<p>上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号这种写法，属于“属性名表达式”</p>
<p><strong> 字符串的解构赋值 </strong><br>字符串能被转换成一个类似数组的对象，因此字符串也可以解构赋值</p>
<blockquote>
<p>const [a, b, c, d, e] = ‘hello’;<br>   a // “h”<br>   b // “e”<br>   c // “l”<br>   d // “l”<br>   e // “o”</p>
</blockquote>
<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p>
<blockquote>
<p>let {length : len} = ‘hello’;<br>   len // 5</p>
</blockquote>
<p><strong> 数值和布尔值的解构赋值  </strong><br>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<blockquote>
<p>let {toString: s} = 123;<br>   s === Number.prototype.toString // true<br>   let {toString: s} = true;<br>   s === Boolean.prototype.toString // true</p>
</blockquote>
<p>上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。</p>
<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>
<blockquote>
<p>let { prop: x } = undefined; // TypeError<br>   let { prop: y } = null; // TypeError</p>
</blockquote>
<p><strong> 函数参数的解构赋值 </strong><br>函数的参数也可以使用解构赋值。</p>
<blockquote>
<p>function add([x, y]){<br>     return x + y;<br>   }</p>
<p>add([1, 2]); // 3</p>
</blockquote>
<p>上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p>
<p>下面是另一个例子。</p>
<blockquote>
<p>[[1, 2], [3, 4]].map(([a, b]) =&gt; a + b);<br>    // [ 3, 7 ]</p>
</blockquote>
<p>函数参数的解构也可以使用默认值。</p>
<blockquote>
<p>function move({x = 0, y = 0} = {}) {<br>     return [x, y];<br>   }</p>
<p>move({x: 3, y: 8}); // [3, 8]<br>   move({x: 3}); // [3, 0]<br>   move({}); // [0, 0]<br>   move(); // [0, 0]</p>
</blockquote>
<p>上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。</p>
<p>注意，下面的写法会得到不一样的结果。</p>
<blockquote>
<p>function move({x, y} = { x: 0, y: 0 }) {<br>    return [x, y];<br>   }</p>
<p>move({x: 3, y: 8}); // [3, 8]<br>   move({x: 3}); // [3, undefined]<br>   move({}); // [undefined, undefined]<br>   move(); // [0, 0]</p>
</blockquote>
<p>上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。</p>
<p>undefined就会触发函数参数的默认值。</p>
<blockquote>
<p>[1, undefined, 3].map((x = ‘yes’) =&gt; x);<br>  // [ 1, ‘yes’, 3 ]</p>
</blockquote>
<hr>
<ul>
<li><a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="external">阮一峰老师的ES6-解构赋值 详细教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6 - let 和 const]]></title>
      <url>/hexo/2017/07/30/ES6%20-%20let%20%E5%92%8C%20const/</url>
      <content type="html"><![CDATA[<h3 id="const-and-let"><a href="#const-and-let" class="headerlink" title="const and let"></a>const and let</h3><a id="more"></a>
<h3 id="let-const-教程"><a href="#let-const-教程" class="headerlink" title="let const 教程"></a><a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="external">let const 教程</a></h3>]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flex语法教程]]></title>
      <url>/hexo/2017/07/25/Flex%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="网页布局（layout）是-CSS-的一个重点应用。"><a href="#网页布局（layout）是-CSS-的一个重点应用。" class="headerlink" title="网页布局（layout）是 CSS 的一个重点应用。"></a>网页布局（layout）是 CSS 的一个重点应用。</h3><h5 id="布局的传统解决方案，基于盒状模型，依赖-display-属性-position属性-float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。W3C-提出了一种新的方案—-Flex-布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。"><a href="#布局的传统解决方案，基于盒状模型，依赖-display-属性-position属性-float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。W3C-提出了一种新的方案—-Flex-布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。" class="headerlink" title="布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。"></a>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</h5><a id="more"></a>
<ol>
<li>什么是Flex<blockquote>
<p>Flex是Flexible Box的缩写，意为”弹性芾局”，用来为盒状模型提供最大的炅活性。<br>任何一个容器都可以指定为Flex布局。任何一个容器都可以指定为Flex布局。<br>Webkit内核的浏览器，必须加上-webkit前缀。<br>、div{ display:flex } span{ displayiflex } p{ -webkit-display:flex } ‘</p>
</blockquote>
</li>
<li><p>属性值 </p>
<blockquote>
<p>容器的属性 :</p>
<ol>
<li>flex-direction : row | row-reverse | column | column-reverse;</li>
<li>flex-wrap : nowrap | wrap | wrap-reverse;<br>3 flex-flow :   flex-direction | | flex-wrap (属性简写）</li>
<li>justify-content : flex-start | flex-end | center | space-between | space-around;</li>
<li>align-items : flex-start | flex-end | center | baseline | stretch;</li>
<li>align-conten : flex-start | flex-end | center | space-between | space-around | stretch;</li>
</ol>
</blockquote>
</li>
<li><p>项目(子元素)的属性 :</p>
<blockquote>
<ol>
<li>order : number (属性定义项目的排列顺序。数值越小，排列越靠前，默认为0)<ol>
<li>flex-grow : number (定义项目的放大比例，默认为0 ,即如果存在剰余空间，也不放大。1为放大,2为放大 两倍〉</li>
<li>flex-shrink : number (定义了项目的缩小比例，默认为1 ,即如果空间不足，该项目将缩小。0为不缩小）</li>
<li>flex-basis : auto|px (属性定义了在分配多余空间之前，项目占据的主轴空间（main size)。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto,即项目的本来大小。〉</li>
<li>flex : auto| none (flex-grow, flex-shrink 和 flex-basis的简写,auto (1 1 auto)和 none (0 0 auto)0 ) align-self : auto | flex-start | flex-end | center | baseline | stretch;<br>(项目可以单独设置这个属性覆盖align-itmes的值,auto表示继承父元素的align-items属性，如果没有父元素，则等同于stretch）</li>
</ol>
</li>
</ol>
</blockquote>
</li>
<li><p><img src="https://dn-mhke0kuv.qbox.me/0dd26d8e99257ff36443.png" alt="汇总"></p>
</li>
<li><p>参考文档 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">阮一蜂老师</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2.0实现在线商城]]></title>
      <url>/hexo/2017/07/22/Vue2-0%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h3 id="这周学习了-尤大大的MVVM框架-Vue-和-Vue周边-按耐不住心中的喜欢-使用vue实现一个商城Demo"><a href="#这周学习了-尤大大的MVVM框架-Vue-和-Vue周边-按耐不住心中的喜欢-使用vue实现一个商城Demo" class="headerlink" title="这周学习了 尤大大的MVVM框架 Vue 和 Vue周边.按耐不住心中的喜欢,使用vue实现一个商城Demo."></a>这周学习了 尤大大的MVVM框架 Vue 和 Vue周边.按耐不住心中的喜欢,使用vue实现一个商城Demo.</h3><a id="more"></a>
<h2 id="Demo预览"><a href="#Demo预览" class="headerlink" title="Demo预览"></a><a href="https://13189449986.github.io/VueStore/dist/#/">Demo预览</a></h2><h2 id="Github源码"><a href="#Github源码" class="headerlink" title="Github源码"></a><a href="https://github.com/13189449986/VueStore" target="_blank" rel="external">Github源码</a></h2><h3 id="项目技术栈使用到"><a href="#项目技术栈使用到" class="headerlink" title="项目技术栈使用到"></a>项目技术栈使用到</h3><p><code>vue: ^2.3.3, vue-resource: ^1.3.4, vue-router: ^2.6.0 , lodash: ^4.17.4 ,webpack: ^2.6.1</code></p>
<hr>
<h2 id="项目爬过的坑"><a href="#项目爬过的坑" class="headerlink" title="项目爬过的坑"></a>项目爬过的坑</h2><ol>
<li>vue-cli启动项目 <code>npm run dev</code> 后本地无法正常显示页面<ul>
<li>此时应该检查本地的 8080 端口是否被占用，需要修改一下配置文件 config&gt;index.js 中调试端口 <code>dev{port:8075}</code></li>
<li>另外我还将 build 的路径前缀修改为 ‘ ./ ‘（原本为 ‘ / ‘），是因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ / ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径。</li>
</ul>
</li>
<li>vue-cli打包上线 <code>npm run build</code> 后在本地显示正常,在服务器上显示异常<ul>
<li>第一就是路径问题. 此时修改一下配置文件 config&gt;index.js 中 build 配置属性 assetsPublicPathL 的值为 ‘./‘ </li>
<li>改完了重新构建发现还是空白，检查下 vue-router 是不是使用了 history 模式，去掉即可。(原因是我在 vue-router 里使用了 mode: ‘history’ ,history 模式可以让 url 更像一个链接，然而需要后台做一些设置，page 服务不能做后台设置)</li>
</ul>
</li>
</ol>
<h3 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h3><p><img src="http://orf1ycv0g.bkt.clouddn.com/blog/170722/keFIg30fHd.png?imageslim" alt="mark"><br><img src="http://orf1ycv0g.bkt.clouddn.com/blog/170722/j30Fej8hfb.png?imageslim" alt="mark"><br><img src="http://orf1ycv0g.bkt.clouddn.com/blog/170726/D3m5dfi09f.gif" alt="mark"></p>
<ul>
<li>让知识与生活每日同行 , 每天比昨天厉害一点 </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 项目 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Vue-cli搭建项目教程]]></title>
      <url>/hexo/2017/07/18/%E4%BD%BF%E7%94%A8Vue-cli%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="使用-vue-cli-搭建项目"><a href="#使用-vue-cli-搭建项目" class="headerlink" title="使用 vue-cli 搭建项目"></a>使用 vue-cli 搭建项目</h2><h3 id="vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，Github仓库"><a href="#vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，Github仓库" class="headerlink" title="vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，Github仓库"></a>vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">Github仓库</a></h3><a id="more"></a>
<ol>
<li><p>安装 Node.js</p>
<blockquote>
<ul>
<li>首先需要安装node环境，可以直接到<a href="http://nodejs.cn/" target="_blank" rel="external">node官网</a>下载安装包,安装完成后，可以命令行工具中输入 node -v 查看是否成功,不成功清除npm缓存<code>npm cache clean</code>重新安装.</li>
<li>推荐使用国内淘宝镜像安装(cnpm)<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>cnpm安装完成后使用<code>cnpm install -g vue-cli</code>安装vue-cli</li>
</ul>
</blockquote>
</li>
<li><p>生成项目</p>
<blockquote>
<ul>
<li>cd进入项目目录  <code>vue init webpack VueProject</code></li>
<li>配置完成后，可以看到目录下多出了一个项目文件夹cd进入vue.js 项目 <code>cd VueProject</code></li>
<li>然后进入项目目录（cd Vue-Project），使用 cnpm 安装依赖 <code>cnpm install</code></li>
<li>启动项目 <code>npm run dev</code></li>
</ul>
</blockquote>
</li>
<li><p>爬坑日记</p>
<blockquote>
<ul>
<li>如果浏览器打开之后，没有加载出页面，有可能是本地的 8080 端口被占用，需要修改一下配置文件 <code>config&gt;index.js  ==&gt;  build:{assetsPublicPath: &#39;./&#39;}</code></li>
<li>建议将端口号改为不常用的端口。另外我还将 build 的路径前缀修改为 ‘ ./ ‘（原本为 ‘ / ‘），是因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ / ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径。<code>dev:{port: 8075}</code></li>
<li>部署到github需要留意vue-router是不是使用了 history 模式，去掉即可。(原因是我在 vue-router 里使用了 mode: ‘history’ ,history 模式可以让 url 更像一个链接，然而需要后台做一些设置，page 服务不能做后台设置)</li>
</ul>
</blockquote>
</li>
<li><p>打包上线部署</p>
<blockquote>
<ul>
<li>项目开发完成之后，可以输入 <code>npm run build</code> 来进行打包工作</li>
<li>打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看</li>
<li>项目上线时，只需要将 dist 文件夹放到服务器就行了。</li>
</ul>
</blockquote>
</li>
</ol>
<hr>
<ul>
<li>vuex安装到项目 <code>npm install vuex --save</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jquery教程]]></title>
      <url>/hexo/2017/06/30/Jquery%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="350行jQuery常用脚本"><a href="#350行jQuery常用脚本" class="headerlink" title="350行jQuery常用脚本"></a>350行jQuery常用脚本</h3><a id="more"></a>
<p>0、常用选择器<br><code>$(&#39;#div1&#39;)   //id为div1的节点，如&lt;div id=&#39;div1&#39;&gt;&lt;/div&gt;</code></p>
<figcaption>  //所有的span结点，一个包装集</code><br><code>$(&#39;p span&#39;)   //p标签下的所有span节点，后代节点</code><br><code>$(&#39;p&gt;span&#39;)   //p标签下的所有span子节点，子代节点</code></p></figcaption><pre class=" language-$(&#39;span&#39;)"><code class="language-$(&#39;span&#39;)"><p><code>$('.red')  //使用样式red的节点，如<span class="red"></span></code></p>
<p><code>$('*')  //所有节点</code></p>
<p><code>$("div,span,p.cls")  //选取所有<div>，<span>和拥有class为cls的<p>标签的一组元素</code></p>
<p>1、基本筛选器<br><code>$('span:first')    //第一个节点</code><br><code>$('span:last')     //最后一个节点</code></p>
<p><code>$("td:even")     //索引为偶数的节点，从 0 开始</code><br><code>$("td:odd")      //索引为奇数的节点，从 0 开始</code></p>
<p><code>$("td:eq(1)")    //给定索引值的节点</code><br><code>$("td:gt(0)")    //大于给定索引值的节点</code><br><code>$("td:lt(2)")    //小于给定索引值的节点</code></p>
<p><code>$(":focus")      //当前获取焦点的节点</code><br><code>$(":animated")   //正在执行动画效果的节点</code></p>
<p>2、内容选择器<br><code>$("div:contains('hello')")    //包含hello文本的节点</code><br><code>$("td:empty")    //不包含子节点或者文本的空节点</code><br><code>$("div:has(p)")  //含有选择器所匹配的节点</code><br><code>$("td:parent")   //含有子节点或者文本的节点</code></p>
<p>3、表单选择器<br><code>$("input:checked")    //所有选中的节点</code><br><code>$("select option:selected")    //select中所有选中的option节点</code></p>
<p><code>$(":input")      //匹配所有 input, textarea, select 和 button 节点</code><br><code>$(":text")       //所有的单行文本框</code><br><code>$(":password")   //所有密码框</code><br><code>$(":radio")      //所有单选按钮</code><br><code>$(":checkbox")   //所有复选框</code><br><code>$(":submit")     //所有提交按钮</code><br><code>$(":reset")      //所有重置按钮</code><br><code>$(":button")     //所有button按钮</code><br><code>$(":file")       //所有文件域</code></p>
<p>4、筛选与查找<br><code>$("p").eq(0)       //当前操作中第N个jQuery对象,类似索引</code><br><code>$('li').first()    //第一个节点</code><br><code>$('li').last()     //最后一个节点</code><br><code>$(this).hasClass("node")    //节点是否含有某个特定的类,返回布尔值</code><br><code>$('li').has('ul')  //包含特定后代的节点</code></p>
<p><code>$("div").children()      //div中的每个子节点,第一层</code><br><code>$("div").find("span")    //查找div下的所有span节点</code></p>
<p><code>$("p").next()       　　　//紧邻p节点后的一个同辈节点</code><br><code>$("p").nextAll()         //p节点之后所有的同辈节点</code><br><code>$("#node").nextUntil("#node2")    //id为"#node"节点之后到id为'#node2'之间所有的同辈节点,掐头去尾</code></p>
<p><code>$("p").prev()            //紧邻p节点前的一个同辈节点</code><br><code>$("p").prevAll()         //p节点之前所有的同辈节点</code><br><code>$("#node").prevUntil("#node2")    //id为"#node"节点之前到id为'#node2'之间所有的同辈节点,掐头去尾</code></p>
<p><code>$("p").parent()          //每个p节点的父节点</code><br><code>$("p").parents()         //每个p节点的所有祖先节点,body,html</code><br><code>$("#node").parentsUntil("#node2")    //id为"#node"节点到id为'#node2'之间所有的父级节点,掐头去尾</code></p>
<p><code>$("div").siblings()      //所有的同辈节点,不包括自己</code></p>
<p>5、属性操作<br><code>$("img").attr("src");    　　　　　　 //返回文档中所有图像的src属性值</code><br><code>$("img").attr("src","node.jpg");    //设置所有图像的src属性</code><br><code>$("img").removeAttr("src");    　　　//将文档中图像的src属性删除</code></p>
<p><code>$("input[type='checkbox']").prop("checked", true);    //选中复选框</code><br><code>$("input[type='checkbox']").prop("checked", false);   //不选中复选框</code><br><code>$("img").removeProp("src");    　　 //删除img的src属性</code></p>
<p>6、样式操作<br><code>$("p").addClass("selected");    　　//为p节点加上 'selected' 类</code><br><code>$("p").removeClass("selected");    //从p节点中删除 'selected' 类</code><br><code>$("p").toggleClass("selected");    //如果存在就删除,否则就添加HTML代码/文本/值</code></p>
<p>7、内容操作<br><code>$('p').html();    　　　　　　　　　　 //返回p节点的html内容</code><br><code>$("p").html("Hello <b>hello</b>!");  //设置p节点的html内容</code><br><code>$('p').text();    　　　　　　　　　　 //返回p节点的文本内容</code><br><code>$("p").text("hello");    　　　　　　　//设置p节点的文本内容</code><br><code>$("input").val();    　　　　　　　　 //获取文本框中的值</code><br><code>$("input").val("hello");     　　　　 //设置文本框中的内容</code></p>
<p>8、CSS操作<br><code>$("p").css("color");          //访问查看p节点的color属性</code><br><code>$("p").css("color","red");    //设置p节点的color属性为red</code><br><code>$("p").css({ "color": "red", "background": "yellow" });    //</code>设置p节点的color为red，background属性为yellow（设置多个属性要用{}字典形式）</p>
<p>9、定位与偏移<br><code>$('p').offset()     //节点在当前视口的相对偏移,对象 {top: 5, left: 9}</code><br><code>$('p').offset().top</code><br><code>$('p').offset().left</code><br><code>$("p").position()   //节点相对父节点的偏移,对可见节点有效，Object {top: 5, left: 8}</code></p>
<p><code>$(window).scrollTop()    //获取滚轮滑的高度</code><br><code>$(window).scrollLeft()   //获取滚轮滑的宽度</code><br><code>$(window).scrollTop('25')    //设置滚轮滑的高度为25</code></p>
<p>10、尺寸<br><code>$("p").height();    //获取p节点的高度</code><br><code>$("p").width();     //获取p节点的宽度</code></p>
<p><code>$("p:first").innerHeight()    //获取第一个匹配节点内部区域高度(包括补白、不包括边框)</code><br><code>$("p:first").innerWidth()     //获取第一个匹配节点内部区域宽度(包括补白、不包括边框)</code></p>
<p><code>$("p:first").outerHeight()    //匹配节点外部高度(默认包括补白和边框)</code><br><code>$("p:first").outerWidth()     //匹配节点外部宽度(默认包括补白和边框)</code><br><code>$("p:first").outerHeight(true)    //为true时包括边距</code></p>
<p>11、DOM内部插入<br><code>$("p").append("<b>hello</b>");    //每个p节点内后面追加内容</code><br><code>$("p").appendTo("div");    　　　 //p节点追加到div内后</code><br><code>$("p").prepend("<b>Hello</b>");  //每个p节点内前面追加内容</code><br><code>$("p").prependTo("div");    　   //p节点追加到div内前</code></p>
<p>12、DOM外部插入<br><code>$("p").after("<b>hello</b>");     //每个p节点同级之后插入内容</code><br><code>$("p").before("<b>hello</b>");    //在每个p节点同级之前插入内容</code><br><code>$("p").insertAfter("#node");     //所有p节点插入到id为node节点的后面</code><br><code>$("p").insertBefore("#node");    //所有p节点插入到id为node节点的前面</code></p>
<p>13、DOM替换<br><code>$("p").replaceWith("<b>Paragraph. </b>");    //将所有匹配的节点替换成指定的HTML或DOM节点</code><br><code>$("<b>Paragraph. </b>").replaceAll("p");     //用匹配的节点替换掉所有 selector匹配到的节点</code></p>
<p>14、DOM删除<br><code>$("p").empty();     //删除匹配的节点集合中所有的子节点，不包括本身</code><br><code>$("p").remove();    //删除所有匹配的节点,包括本身</code><br><code>$("p").detach();    //删除所有匹配的节点(和remove()不同的是:所有绑定的事件、附加的数据会保留下来)</code></p>
<p>15、DOM复制<br><code>$("p").clone()    　　//克隆节点并选中克隆的副本</code><br><code>$("p").clone(true)   //布尔值指事件处理函数是否会被复制</code></p>
<p>16、DOM加载完成事件<br><code>$(document).ready(function(){
  您的代码...
});</code></p>
<p>//缩写<br><code>$(function($) {
  您的代码...
});</code></p>
<p>17、绑定事件<br>//bind 为每个匹配节点绑定事件处理函数，绑定多个用{}。<br><code>$("p").bind("click", function(){
  alert( $(this).text() );
});</code><br><code>$('#div1').bind({
    "mouseover":function () {
     $('#div1').parent().removeClass("hide");
     },"mouseout":function () {
     $('#div1').parent().addClass("hide");
}
});</code>         </p>
<p><code>$("p").one( "click", function(){})    //事件绑定后只会执行一次</code><br><code>$("p").unbind( "click" )        //反绑一个事件</code></p>
<p>// 与bind 不同的是当时间发生时才去临时绑定。<br><code>$("p").delegate("click",function(){</code><br>  您的代码<br>});</p>
<p><code>$("p").undelegate();    　　　//p节点删除由 delegate() 方法添加的所有事件</code><br><code>$("p").undelegate("click")   //从p节点删除由 delegate() 方法添加的所有click事件</code></p>
<p><code>$("p").click();    　　//单击事件</code><br><code>$("p").dblclick();    //双击事件</code><br><code>$("input[type=text]").focus()  //节点获得焦点时,触发 focus 事件</code><br><code>$("input[type=text]").blur()   //节点失去焦点时,触发 blur事件</code><br><code>$("button").mousedown()//当按下鼠标时触发事件</code><br><code>$("button").mouseup()  //节点上放松鼠标按钮时触发事件</code><br><code>$("p").mousemove()     //当鼠标指针在指定的节点中移动时触发事件</code><br><code>$("p").mouseover()     //当鼠标指针位于节点上方时触发事件</code><br><code>$("p").mouseout()    　//当鼠标指针从节点上移开时触发事件</code><br><code>$(window).keydown()    //当键盘或按钮被按下时触发事件</code><br><code>$(window).keypress()   //当键盘或按钮被按下时触发事件,每输入一个字符都触发一次</code><br><code>$("input").keyup()     //当按钮被松开时触发事件</code><br><code>$(window).scroll()     //当用户滚动时触发事件</code><br><code>$(window).resize()     //当调整浏览器窗口的大小时触发事件</code><br><code>$("input[type='text']").change()    //当节点的值发生改变时触发事件</code><br><code>$("input").select()    //当input 节点中的文本被选择时触发事件</code><br><code>$("form").submit()     //当提交表单时触发事件</code><br><code>$(window).unload()     //用户离开页面时</code></p>
<p>18、事件对象<br><code>$("p").click(function(event){
 alert(event.type); //"click"  
});</code></p>
<p>(evnet object)属性方法：<br><code>event.pageX 　 //事件发生时，鼠标距离网页左上角的水平距离</code><br><code>event.pageY 　 //事件发生时，鼠标距离网页左上角的垂直距离</code><br><code>event.type 　　//事件的类型</code><br><code>event.which 　 //按下了哪一个键</code><br><code>event.data 　　//在事件对象上绑定数据，然后传入事件处理函数</code><br><code>event.target 　//事件针对的网页节点</code><br><code>event.preventDefault() 　//阻止事件的默认行为(比如点击链接，会自动打开新页面)</code><br><code>event.stopPropagation()  //停止事件向上层节点冒泡</code></p>
<p>19、动态事件绑定<br><code>$("p").on("click",'span',function(){
alert( $(this).text() );
});</code><br>//当p中增加span时仍然有效</p>
<p>20、动画效果<br><code>$("p").show()    　　　　//显示隐藏的匹配节点</code><br><code>$("p").show("slow");    //参数表示速度,("slow","normal","fast"),也可为600毫秒</code><br><code>$("p").hide()    　　　　//隐藏显示的节点</code><br><code>$("p").toggle();   　　 //切换 显示/隐藏</code></p>
<p><code>$("p").slideDown("600");    //用600毫秒时间将段落滑下</code><br><code>$("p").slideUp("600");    　//用600毫秒时间将段落滑上</code><br><code>$("p").slideToggle("600");  //用600毫秒时间将段落滑上，滑下淡入淡出</code></p>
<p><code>$("p").fadeIn("600");    　　  //用600毫秒时间将段落淡入</code><br><code>$("p").fadeOut("600");    　　 //用600毫秒时间将段落淡出</code><br><code>$("p").fadeToggle("600");    　//用600毫秒时间将段落淡入,淡出</code><br><code>$("p").fadeTo("slow", 0.6);    //用600毫秒时间将段落的透明度调整到0.6</code></p>
<p>21、工具方法<br><code>$("#form1").serialize()    //序列表表格内容为字符串。</code><br><code>$("select, :radio").serializeArray();  //序列化表单元素为数组返回 JSON 数据结构数据</code><br><code>$.trim() 　　//去除字符串两端的空格</code><br><code>$.each() 　　//遍历一个数组或对象，for循环</code><br><code>$.inArray() //返回一个值在数组中的索引位置，不存在返回-1</code><br><code>$.grep() 　 //返回数组中符合某种标准的节点</code><br><code>$.extend({a:1,b:2},{b:3,c:4},{c:5:d:6})  //将多个对象，合并到第一个对象{a:1,b:3,c:5,d:6}</code><br><code>$.makeArray() //将对象转化为数组</code><br><code>$.type()    //判断对象的类别（函数对象、日期对象、数组对象、正则对象等等</code><br><code>$.isArray() //判断某个参数是否为数组</code><br><code>$.isEmptyObject() //判断某个对象是否为空(不含有任何属性)</code><br><code>$.isFunction()    //判断某个参数是否为函数</code><br><code>$.isPlainObject() //判断某个参数是否为用"{}"或"new Object"建立的对象</code><br><code>$.support()       //判断浏览器是否支持某个特性</code></p>
<p>22、AJAX<br>//保存数据到服务器，成功时显示信息<br><code>$.ajax({
   type: "POST",
   url: "some.php",
   data: "name=John&location=Boston",
   success: function(msg){
     alert( "Data Saved: " + msg );
   }
});</code></p>
<p>//加载 feeds.html 文件内容。<br><code>$("#feeds").load("feeds.html");</code></p>
<p>//请求 test.php 网页，传送2个参数，忽略返回值。<br><code>$.get("test.php", { name: "John", time: "2pm" } );</code></p>
<p>//从 Flickr JSONP API 载入 4 张最新的关于猫的图片。<br><code>$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?tags=cat&tagmode=any&format
=json&jsoncallback=?", function(data){
  $.each(data.items, function(i,item){
    $("<img/>").attr("src", item.media.m).appendTo("#images");
    if ( i == 3 ) return false;
  });
});</code></p>
<p>//加载并执行 test.js ，成功后显示信息<br><code>$.getScript("test.js", function(){
  alert("Script loaded and executed.");
});</code></p>
<p>//向页面 test.php 发送数据，并输出结果（HTML 或 XML，取决于所返回的内容）：<br><code>$.post("test.php", { name: "John", time: "2pm" },
   function(data){
     alert("Data Loaded: " + data);
   });</code></p>
<p>//AJAX 请求完成时执行函数。<br><code>$("#msg").ajaxComplete(function(event,request, settings){
   $(this).append("<li>请求完成.</li>");
 });</code></p>
<p>//AJAX 请求失败时显示信息。<br><code>$("#msg").ajaxError(function(event,request, settings){
     $(this).append("<li>出错页面:" + settings.url + "</li>");
});</code></p>
<p>//AJAX 请求发送前显示信息。<br><code>$("#msg").ajaxSend(function(evt, request, settings){
   $(this).append("<li>开始请求: " + settings.url + "</li>");
 });</code></p>
<p> //AJAX 请求开始时显示信息。<br><code>$("#loading").ajaxStart(function(){
   $(this).show();
 });</code></p>
<p>//AJAX 请求结束后隐藏信息。<br><code>$("#loading").ajaxStop(function(){
   $(this).hide();
 });</code></p>
<p>//当 AJAX 请求成功后显示消息。<br><code>$("#msg").ajaxSuccess(function(evt, request, settings){
   $(this).append("<li>请求成功!</li>");
 });</code></p>
<p>//请求前过滤<br><code>$.ajaxPrefilter( function( options, originalOptions, jqXHR ) {
   // Modify options, control originalOptions, store jqXHR, etc 
 });</code></p>
<p> //设置全局 AJAX 默认选项，设置 AJAX 请求默认地址为 “/xmlhttp/“，禁止触发全局 AJAX 事件，用 POST 代替默认 GET 方法。其后的 AJAX 请求不再设置任何选项参数。<br><code>$.ajaxSetup({
  url: "/xmlhttp/",
  global: false,
  type: "POST"
});</code><br><code>$.ajax({ data: myData });</code></pre>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git命令教程]]></title>
      <url>/hexo/2017/06/24/Git%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h4 id="这篇文章将对git命令进行梳理-巩固一下知识"><a href="#这篇文章将对git命令进行梳理-巩固一下知识" class="headerlink" title="这篇文章将对git命令进行梳理,巩固一下知识"></a>这篇文章将对git命令进行梳理,巩固一下知识</h4><a id="more"></a>
<h3 id="1-开始"><a href="#1-开始" class="headerlink" title="1. 开始"></a>1. 开始</h3><blockquote>
<p> 使用Git前，可以使用一个已经本地存在的目录或创建一个空目录作为Git仓库.首先建立使用命令<br><code>git init</code> 创建仓库(repository).</p>
</blockquote>
<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><blockquote>
<p>添加文件 :  <code>git add FlieName</code></p>
<p>提交 : <code>git commit -m &quot;Adding files&quot;</code></p>
<p>– 当我们修改了很多文件不想每一个都add，我们可以使用-a标识。<code>git commit -a -m &quot;Changed some files&quot;</code> (<code>-a</code>不会将新文件提交，只能将仓库中已有的文档进行提交修改)</p>
<p>查看库的当前状态 : <code>git status</code></p>
<p>查看上次修改的详情 : <code>git diff</code></p>
<p>查看历史记录 : <code>git log --pretty=oneline</code></p>
<p>将工作区的版本回退到版本库内容(撤销修改)  : <code>git checkout -- rmfile</code></p>
<p>克隆库 : <code>git clone ssh://example.com/~/www/project.git</code></p>
<p>推送本地修改到服务器 : <code>git push ssh://example.com/~/www/project.git</code></p>
<p>从服务器取得更新 : <code>git pull http://git.example.com/project.git</code></p>
<p>删除库中文件 : <code>git rm file</code></p>
<p>创建分支 : <code>git branch newtest</code></p>
<p>删除分支 : <code>git branch -d newtest</code></p>
<p>进入分支 : <code>git checkout newtest</code></p>
<p>回到主分支 : <code>git checkout master</code></p>
<p>合并分支 : <code>git checkout master  ==&gt; git merge newtest</code><br>– 对其他分支的更改不会反映在主分支上。如果想将更改提交到主分支，则需切换回master分支，然后使用合并。</p>
</blockquote>
<hr>
<h4 id="想对Git进行充分详细的了解-推荐-廖雪峰老师的Git详细教程"><a href="#想对Git进行充分详细的了解-推荐-廖雪峰老师的Git详细教程" class="headerlink" title="想对Git进行充分详细的了解,推荐 廖雪峰老师的Git详细教程"></a><strong>想对Git进行充分详细的了解,推荐</strong> <strong><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">廖雪峰老师的Git详细教程</a></strong></h4>]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微博图床]]></title>
      <url>/hexo/2017/01/11/%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/</url>
      <content type="html"><![CDATA[<p><strong> 首先感谢新浪微博提供的免费图床(对外链无限制),以及吊炸天的cdn图片加速服务,从此妈妈再也不用担心我的图床不能用了 </strong><br><a id="more"></a><br><strong> 微博图床原理: </strong></p>
<p>访问<em> <a href="http://weibo.com/minipublish" target="_blank" rel="external">http://weibo.com/minipublish</a> </em><br>使用新浪微博账号登陆<br>进入到发微博的界面:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1797266-ae337adb941f15d3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微博"></p>
<p>点击下方的上传图片按钮,并上传本地图片,上传成功后,会在下方出现一张预览图,打开控制台找到这张图片的url,这就是新浪图床的url.</p>
<ul>
<li>不需要发布微博,图片只要上传就会存在于图床中 </li>
</ul>
<blockquote>
<p>实用微博图床推荐 </p>
</blockquote>
<p><a href="https://link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/%25E6%2596%25B0%25E6%25B5%25AA%25E5%25BE%25AE%25E5%258D%259A%25E5%259B%25BE%25E5%25BA%258A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf" target="_blank" rel="external">新浪微博图床 - Chrome 网上应用店</a><br><a href="https://link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/%25E5%259B%25B4%25E8%2584%2596%25E6%2598%25AF%25E4%25B8%25AA%25E5%25A5%25BD%25E5%259B%25BE%25E5%25BA%258A/pngmcllbdfgmhdgnnpfaciaolgbjplhe" target="_blank" rel="external">围脖是个好图床 - Chrome 网上应用店</a></p>
<blockquote>
<p>实用云图床推荐 </p>
</blockquote>
<p><a href="https://www.tuchuang001.com/" target="_blank" rel="external">https网页一建生产图床</a><br><a href="https://portal.qiniu.com/signup/choice?code=3lk20icty4daq" target="_blank" rel="external">七牛云存储</a></p>
]]></content>
      
        <categories>
            
            <category> 实用工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/hexo/2016/12/11/hello-world/</url>
      <content type="html"><![CDATA[<p><strong> 欢迎您 !  </strong><br><strong> 主人不在随便坐哈 ~ </strong><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 实用工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年轻真好 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/hexo/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=utf-8;">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="robots" content="all">
  <meta name="robots" content="index,follow">
  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css">
<link rel="stylesheet" href="/hexo/css/prism.css" type="text/css"></head>
<body>
  <script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="�ص��ҵ���ҳ">
  </script>
  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>
  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script>
</body>
</html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>/hexo/404/404.html</url>
      <content type="html"><![CDATA[<p>&lt;!DOCTYPE HTML&gt;</p>
<html><br><head><br>  <meta http-equiv="content-type" content="text/html;charset=utf-8;"><br>  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><br>  <meta name="robots" content="all"><br>  <meta name="robots" content="index,follow"><br>  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"><br><link rel="stylesheet" href="/hexo/css/prism.css" type="text/css"></head><br><body><br>  <script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页"><br>  </script><br>  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script><br>  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script><br></body><br></html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/hexo/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="欢迎您访问我的网站-如果您在阅读过程中发现有更好的想法欢迎您与我一同实现"><a href="#欢迎您访问我的网站-如果您在阅读过程中发现有更好的想法欢迎您与我一同实现" class="headerlink" title="欢迎您访问我的网站,如果您在阅读过程中发现有更好的想法欢迎您与我一同实现."></a>欢迎您访问我的网站,如果您在阅读过程中发现有更好的想法欢迎您与我一同实现.</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>/hexo/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/hexo/404/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=utf-8;">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="robots" content="all">
  <meta name="robots" content="index,follow">
  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css">
<link rel="stylesheet" href="/hexo/css/prism.css" type="text/css"></head>
<body>
  <script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="�ص��ҵ���ҳ">
  </script>
  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>
  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script>
</body>
</html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>/hexo/404/index.html</url>
      <content type="html"><![CDATA[<p>&lt;!DOCTYPE HTML&gt;</p>
<html><br><head><br>  <meta http-equiv="content-type" content="text/html;charset=utf-8;"><br>  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><br>  <meta name="robots" content="all"><br>  <meta name="robots" content="index,follow"><br>  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"><br><link rel="stylesheet" href="/hexo/css/prism.css" type="text/css"></head><br><body><br>  <script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页"><br>  </script><br>  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script><br>  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script><br></body><br></html>]]></content>
    </entry>
    
  
</search>
